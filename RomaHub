local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "RomaHub",
   LoadingTitle = "Universal RomaHub",
   LoadingSubtitle = "by Roma",
   ConfigurationSaving = {
      Enabled = false,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "RomaHub"
      
   },
   Discord = {
      Enabled = false,
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },
   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "RomaHub",
      Subtitle = "Key System",
      Note = "Key-Roma",
      FileName = "RomaHubKey", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = false, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = true, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Roma"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local MainTab = Window:CreateTab("üè† Main", nil) -- Title, Image
local MainSection = MainTab:CreateSection("Main")

Rayfield:Notify({
   Title = "You executed the script",
   Content = "Very cool gui",
   Duration = 5,
   Image = 13047715178,
   Actions = { -- Notification Buttons
      Ignore = {
         Name = "Okay!",
         Callback = function()
         print("The user tapped Okay!")
      end
   },
},
})

local Button = MainTab:CreateButton({
   Name = "Infinite Jump",
   Callback = function()
       --Toggles the infinite jump between on or off on every script run
_G.infinjump = not _G.infinjump

if _G.infinJumpStarted == nil then
	--Ensures this only runs once to save resources
	_G.infinJumpStarted = true
	
	--Notifies readiness
	game.StarterGui:SetCore("SendNotification", {Title="Youtube Hub"; Text="Infinite Jump Activated!"; Duration=5;})

	--The actual infinite jump
	local plr = game:GetService('Players').LocalPlayer
	local m = plr:GetMouse()
	m.KeyDown:connect(function(k)
		if _G.infinjump then
			if k:byte() == 32 then
			humanoid = game:GetService'Players'.LocalPlayer.Character:FindFirstChildOfClass('Humanoid')
			humanoid:ChangeState('Jumping')
			wait()
			humanoid:ChangeState('Seated')
			end
		end
	end)
end
   end,
})

local Slider = MainTab:CreateSlider({
   Name = "WalkSpeed",
   Range = {1, 350},
   Increment = 1,
   Suffix = "Speed",
   CurrentValue = 16,
   Flag = "sliderws", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = (Value)
   end,
})

local Slider = MainTab:CreateSlider({
   Name = "JumpPower",
   Range = {1, 350},
   Increment = 1,
   Suffix = "Speed",
   CurrentValue = 16,
   Flag = "sliderjp", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = (Value)
   end,
})

local Button = MainTab:CreateButton({
   Name = "Fly",
   PlaceholderText = "FlyButton",
   RemoveTextAfterFocusLost = true,
   Callback = function(Fly)
        loadstring(game:HttpGet"https://raw.githubusercontent.com/RobinGood-cell/FLY-BY-ROMA/refs/heads/main/FLY%20BY%20ROMA")()
   end,
})

local OtherSection = MainTab:CreateSection("Other")

local Button = MainTab:CreateButton({
   Name = "Infinity Yeld",
       PlaceholderText = "InfinityButton",
   RemoveTextAfterFocusLost = true,
   Callback = function(Infinity)
        loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))()
    end,
})

local TrollTab = Window:CreateTab("Trollüëª", Troll)

local Button = TrollTab:CreateButton({
     Name = "Invisible",
   Options = {"Invisible"},
   CurrentOption = {"Invisible"},
   MultipleOptions = false,
   Flag = "Invisible", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Text)
        loadstring(game:HttpGet('https://raw.githubusercontent.com/GhostPlayer352/Test4/main/Invisible%20Gui'))()
   end,
})

local Button = TrollTab:CreateButton({
   Name = "Fling",
   PlaceholderText = "FlingButton",
   RemoveTextAfterFocusLost = true,
   Callback = function(Fling)
        loadstring(game:HttpGet("https://pastebin.com/raw/LgZwZ7ZB",true))()
    end,
})

local Button = TrollTab:CreateButton({
   Name = "RobloxEgor",
   PlaceholderText = "EgorButton",
   RemoveTextAfterFocusLost = true,
   Callback = function(Egor)    
    loadstring(game:HttpGet("https://raw.githubusercontent.com/GithubMagical/Roblox-Egor/refs/heads/main/lua%20v2", true))()
    end,
})

local VisualsTab = Window:CreateTab("üßø Visuals", Visuals)

local Button = VisualsTab:CreateButton({
   Name = "ESP",
   PlaceholderText = "espButton",
   RemoveTextAfterFocusLost = true,
   Callback = function(Text)
        loadstring(game:HttpGet("https://raw.githubusercontent.com/azir-py/exploits/refs/heads/%E2%80%8E/yep.lua"))()
    end,
})

local Button = VisualsTab:CreateButton({
   Name = "tracers",
   PlaceholderText = "tracersButton",
   RemoveTextAfterFocusLost = true,
   Callback = function(Text)
        loadstring(game:HttpGet"https://raw.githubusercontent.com/RobinGood-cell/tracers/refs/heads/main/tracers")()
    end,
})

local Slider = VisualsTab:CreateSlider({
   Name = "Fov",
   Range = {50, 150},
   Increment = 1,
   Suffix = "Fov",
   CurrentValue = 70,
   Flag = "slideruz", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        workspace.Camera.FieldOfView = (Value)
   end,
})
local Button = VisualsTab:CreateButton({
   Name = "FullBright",
   PlaceholderText = "FullBrightButton",
   RemoveTextAfterFocusLost = true,
   Callback = function(Text)
        game.Lighting.FogEnd = 100000
        game.Lighting.FogStart = 0
        game.Lighting.ClockTime = 14
        game.Lighting.Brightness = 2
        game.Lighting.GlobalShadows = false
    end,
})

local Button = VisualsTab:CreateButton({
   Name = "HitboxExpander",
   PlaceholderText = "HitboxButton",
   RemoveTextAfterFocusLost = true,
   Callback = function(Text)
        loadstring(game:HttpGet('https://raw.githubusercontent.com/AAPVdev/scripts/refs/heads/main/UI_LimbExtender.lua'))()
    end,
})

local MyHubsTab = Window:CreateTab("üéÉ MyHubs", Hubs)

local Button = MyHubsTab:CreateButton({
   Name = "Katx",
   PlaceholderText = "KatXButton",
   RemoveTextAfterFocusLost = true,
   Callback = function(Text)
        loadstring(game:HttpGet("https://raw.githubusercontent.com/RobinGood-cell/Nigalose-2.0/refs/heads/main/Nigalose2.0.lua"))()
    end,
})

local AimbotTab = Window:CreateTab("üß® Aimbot", Aimbot)

local Button = AimbotTab:CreateButton({
   Name = "Aimbot",
   PlaceholderText = "AimbotButton",
   RemoveTextAfterFocusLost = true,
   Callback = function(Text)
        loadstring(game:HttpGet("https://raw.githubusercontent.com/Exunys/Aimbot-V3/main/src/Aimbot.lua"))()()
    end,
})
